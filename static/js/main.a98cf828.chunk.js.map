{"version":3,"sources":["components/Formulario.js","components/Tarea.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearTarea","useState","nombreTarea","responsable","fecha","hora","descripcion","tarea","actualizarTarea","error","actualizarError","handleChange","e","target","name","value","onSubmit","preventDefault","keys","Object","pop","filter","key","trim","length","id","uuid","className","role","type","placeholder","onChange","Tarea","eliminarTarea","Date","toString","split","onClick","propTypes","PropTypes","func","isRequired","App","tareasIniciales","JSON","parse","localStorage","getItem","tareas","agregarTareas","useEffect","setItem","stringify","nuevasTareas","titulo","map","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a98cf828.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\n// componente que recibe como parametros props.agregarTareas\r\nconst Formulario = ({ crearTarea }) => {\r\n  // crear el state de tareas\r\n  const [tarea, actualizarTarea] = useState({\r\n    nombreTarea: \"\",\r\n    responsable: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    descripcion: \"\"\r\n  });\r\n\r\n  const [error, actualizarError] = useState(false);\r\n\r\n  //arrow function que se ejecuta cuando el usuario escribe en los input\r\n  const handleChange = e => {\r\n    //modifica el state\r\n    actualizarTarea({\r\n      ...tarea,\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  const { nombreTarea, responsable, fecha, hora, descripcion } = tarea;\r\n\r\n  // al enviar formulario\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    //validacion campos vacíos\r\n    /*\r\n    * La siguiente es una validacion que se realiza recorriendo los valores del objeto tarea y \r\n    remplaza el siguiente codigo:\r\n    if(nombreTarea === ''){\r\n        actualizarError(true)\r\n    */\r\n\r\n    const isEmpty = str => str.trim() === \"\";\r\n    const keys = Object.keys(tarea);\r\n    //para que descripcion sea opcional\r\n    keys.pop();\r\n    const fields = keys.filter(key => isEmpty(tarea[key]));\r\n    if (fields.length > 0) {\r\n      actualizarError(true);\r\n      return;\r\n    }\r\n    // actualiza el error a falso para quitar el mensaje de error\r\n    actualizarError(false);\r\n    //genera un id unico\r\n    tarea.id = uuid();\r\n    //agregar objeto al state de APP.js\r\n    crearTarea(tarea);\r\n\r\n    // limpiar datos del formulario\r\n    actualizarTarea({\r\n      nombreTarea: \"\",\r\n      responsable: \"\",\r\n      fecha: \"\",\r\n      hora: \"\",\r\n      descripcion: \"\"\r\n    });\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <h2>Crear recordatorio</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {error ? (\r\n          <div className=\"alert alert-danger\" role=\"alert\">\r\n            No pueden haber campos vacíos!\r\n          </div>\r\n        ) : null}\r\n        <div className=\"form-group\">\r\n          <label>Nombre de la tarea</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"nombreTarea\"\r\n            className=\"form-control\"\r\n            placeholder=\"Ingrese la tarea\"\r\n            onChange={handleChange}\r\n            value={nombreTarea}\r\n          />\r\n          <label>Nombre del responsable</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"responsable\"\r\n            className=\"form-control\"\r\n            placeholder=\"Ingrese el responsable\"\r\n            onChange={handleChange}\r\n            value={responsable}\r\n          />\r\n          <label>Fecha</label>\r\n          <input\r\n            type=\"date\"\r\n            name=\"fecha\"\r\n            className=\"form-control\"\r\n            onChange={handleChange}\r\n            value={fecha}\r\n          />\r\n          <label>Hora</label>\r\n          <input\r\n            type=\"time\"\r\n            name=\"hora\"\r\n            className=\"form-control\"\r\n            onChange={handleChange}\r\n            value={hora}\r\n          />\r\n          <label>Descripcion (opcional)</label>\r\n          <textarea\r\n            name=\"descripcion\"\r\n            className=\"form-control\"\r\n            onChange={handleChange}\r\n            value={descripcion}\r\n          ></textarea>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Agregar\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Formulario;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst Tarea = ({ tarea, eliminarTarea }) => {\r\n  //const keys = Object.keys(tarea);\r\n  //console.log(keys);\r\n  let fecha = new Date(tarea.fecha);\r\n  fecha = fecha.toString().split(\" \")[0];\r\n\r\n  return (\r\n    <div className=\"card bg-light mb-3\">\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text\">\r\n          <strong>Tarea:</strong> {tarea.nombreTarea} <br />\r\n          <strong>Responsable: </strong>\r\n          {tarea.responsable}\r\n          <br />\r\n          <strong>Fecha: </strong>\r\n          {fecha} {tarea.fecha}\r\n          <br />\r\n          <strong>Hora: </strong>\r\n          {tarea.hora}\r\n          <br />\r\n          <strong>Descripcion: </strong>\r\n          {tarea.descripcion}\r\n          <br />\r\n        </p>\r\n\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={() => eliminarTarea(tarea.id)}\r\n        >\r\n          Eliminar tarea\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tarea;\r\n\r\n/*\r\n{keys.map(llave => (\r\n          <p className=\"card-text\">\r\n            {llave == \"id\" ? null : <strong>{llave} : </strong>}\r\n            {llave == \"id\" ? null : tarea[llave]}\r\n          </p>\r\n        ))}\r\n*/\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./components/Formulario\";\nimport Tarea from \"./components/Tarea\";\nimport PropTypes from \"prop-types\";\n\nfunction App() {\n  // Tareas en localStorage\n  let tareasIniciales = JSON.parse(localStorage.getItem(\"tareas\"));\n  if (!tareasIniciales) {\n    tareasIniciales = [];\n  }\n  // Arreglo de tareas\n  const [tareas, agregarTareas] = useState(tareasIniciales);\n\n  // use effect para realizar operaciones cuando el state cambia( siempre es arrow function)\n  //para ejecutar una sola vez se pasa un arreglo vacio al final \"Similar ComponentDidMount\"\n  useEffect(() => {\n    localStorage.setItem(\"tareas\", JSON.stringify(tareas));\n  }, [tareas, tareasIniciales]);\n\n  // function que toma las tareas actuales y agrega las nuevas\n  const crearTarea = tarea => {\n    agregarTareas([...tareas, tarea]);\n  };\n\n  // function para eliminar las tareas\n  const eliminarTarea = id => {\n    //con el filter se recorre el arreglo de tareas y se filtra para que no traiga el id a eliminar\n    const nuevasTareas = tareas.filter(tarea => tarea.id !== id);\n    agregarTareas(nuevasTareas);\n  };\n\n  const titulo = tareas.length === 0 ? \"No hay tareas\" : \"Lista de tareas\";\n\n  return (\n    <Fragment>\n      <h1>Administrador de tareas</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <Formulario crearTarea={crearTarea} />\n          </div>\n          <div className=\"col-sm-6\">\n            <h2>{titulo}</h2>\n            {tareas.map(tarea => (\n              <Tarea\n                key={tarea.id}\n                tarea={tarea}\n                eliminarTarea={eliminarTarea}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      <footer className=\"page-footer font-small blue\">\n        <div className=\"footer-copyright text-center py-3\">\n          © 2020 Copyright:\n          <a\n            className=\"text-dark\"\n            href=\"https://www.linkedin.com/in/nicolas-ariza/\"\n          >\n            Nicolas Ariza\n          </a>\n        </div>\n      </footer>\n    </Fragment>\n  );\n}\n//documentacion de codigo\nFormulario.propTypes = {\n  crearTarea: PropTypes.func.isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}